@startuml US480

actor Utilizador
participant "PendingTaskListComponent" as UIComponent
participant "task.service" as UIService
participant "TaskPickupDeliveryViewModel" as PUViewModel
participant "TaskVigilanceViewModel" as VViewModel
participant "taskRoute" as Route
participant "taskController" as Controller
participant "taskService" as Service
participant "TaskPickupDeliveryRepo" as PURepo
participant "TaskVigilanceRepo" as VRepo
participant "TaskVigilanceDTO" as VDTO
participant "TaskPickupDeliveryDTO" as PUDTO

Utilizador -> UIComponent : Listar tarefas pendentes
activate UIComponent
UIComponent -> UIService :getAllPickupDeliveryPendingTasks()
activate UIService

UIService-> Route :get(api/tasks/pendingPickUp)
activate Route



activate Controller
Route -> Controller: getAllPickupDeliveryPendingTasks()



activate Service

Controller -> Service : getAllPickupDeliveryPendingTasks()

Service -> PURepo : findAll()
activate PURepo
PURepo -> Service : allTasks
deactivate PURepo

Service -> Service : filteredApprovedTasks = allTasks.filter(task.approved);
Service -> Service : filteredApprovedNotPlannedTasks = allTasks.filter(task.planned);
Service -> PUDTO :filteredApprovedNotPlannedTasks.toDTO(tasks);
activate PUDTO
PUDTO --> Service : pendingTasksDTO[];
deactivate PUDTO
Service --> Controller : pendingTasksDTO[];
Controller --> Route : pendingTasksDTO[];
Route --> UIService : pendingTasksDTO[];
UIService --> PUViewModel : pendingTasksDTO[];
activate PUViewModel
PUViewModel--> UIComponent: pickupTaskViewModels[];
deactivate PUViewModel
UIComponent -> UIComponent : updatePendingTaskList(pickupTaskViewModels[]);

UIComponent -> UIService :getAllVigilancePendingTasks()
UIService-> Route :get(api/tasks/pendingVigilance)
Route -> Controller: getAllVigilancePendingTasks()
Controller -> Service : getAllVigilancePendingTasks()

Service -> VRepo : findAll()
activate VRepo
VRepo -> Service : allTasks
deactivate VRepo

Service -> Service : filteredApprovedTasks = allTasks.filter(task.approved);
Service -> Service : filteredApprovedNotPlannedTasks = allTasks.filter(task.planned);
Service -> VDTO :filteredApprovedNotPlannedTasks.toDTO(tasks);
activate VDTO
VDTO --> Service : pendingTasksDTO[];
deactivate VDTO
Service --> Controller : pendingTasksDTO[];
Controller --> Route : pendingTasksDTO[];
Route --> UIService : pendingTasksDTO[];
UIService --> VViewModel : pendingTasksDTO[];
activate VViewModel
VViewModel--> UIComponent: vigilanceTaskViewModels[];
deactivate VViewModel
UIComponent -> UIComponent : updatePendingTaskList(vigilanceTaskViewModels[]);


UIComponent --> Utilizador : Mostra lista de tarefas pendentes/erro ao obter tarefas;


@enduml