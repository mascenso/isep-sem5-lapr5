@startuml US480

actor Utilizador
participant "PendingTaskListComponent" as UIComponent
participant "task.service" as UIService
participant "TaskPickupDeliveryViewModel" as PUViewModel
participant "TaskVigilanceViewModel" as VViewModel
participant "taskRoute" as Route
participant "taskController" as Controller
participant "taskService" as Service
participant "TaskPickupDeliveryRepo" as PURepo
participant "TaskVigilanceRepo" as VRepo
participant "TaskVigilanceDTO" as VDTO
participant "TaskPickupDeliveryDTO" as PUDTO

Utilizador -> UIComponent : Listar tarefas pendentes
activate UIComponent
UIComponent -> UIService :getAllPickupDeliveryPendingTasks()
activate UIService

UIService-> Route :get(api/tasks/pendingPickUp)
activate Route
Route -> Controller: getAllPickupDeliveryPendingTasks()
activate Controller
Controller -> Service : getAllPickupDeliveryPendingTasks()
activate Service
Service -> PURepo : findAll()
activate PURepo
PURepo -> Service : allTasks
deactivate PURepo

Service -> Service : filteredPendingTasks = allTasks.filter(task.pending);
Service -> PUDTO :filteredPendingTasks.toDTO(tasks);
activate PUDTO
PUDTO --> Service : pendingTasksDTO[];
deactivate PUDTO
Service --> Controller : pendingTasksDTO[];
deactivate Service
Controller --> Route : pendingTasksDTO[];
deactivate Controller
Route --> UIService : pendingTasksDTO[];
deactivate Route
UIService --> UIComponent : pendingTasksDTO[];
deactivate UIService
UIComponent --> PUViewModel : pendingTasksDTO[];
activate PUViewModel
PUViewModel--> UIComponent: pickupTaskViewModels[];
deactivate PUViewModel
UIComponent -> UIComponent : updatePendingTaskList(pickupTaskViewModels[]);

UIComponent -> UIService :getAllVigilancePendingTasks()
activate UIService
UIService-> Route :get(api/tasks/pendingVigilance)
activate Route
Route -> Controller: getAllVigilancePendingTasks()
activate Controller
Controller -> Service : getAllVigilancePendingTasks()
activate Service
Service -> VRepo : findAll()
activate VRepo
VRepo -> Service : allTasks
deactivate VRepo

Service -> Service : filteredPendingTasks = allTasks.filter(task.pending);
Service -> VDTO :filteredPendingTasks.toDTO(tasks);
activate VDTO
VDTO --> Service : pendingTasksDTO[];
deactivate VDTO
Service --> Controller : pendingTasksDTO[];
deactivate Service
Controller --> Route : pendingTasksDTO[];
deactivate Controller
Route --> UIService : pendingTasksDTO[];
deactivate Route
UIService --> UIComponent : pendingTasksDTO[];
deactivate UIService
UIComponent --> VViewModel : pendingTasksDTO[];

activate VViewModel
VViewModel--> UIComponent: vigilanceTaskViewModels[];
deactivate VViewModel
UIComponent -> UIComponent : updatePendingTaskList(vigilanceTaskViewModels[]);




UIComponent --> Utilizador : Mostra lista de tarefas pendentes/erro ao obter tarefas;


@enduml